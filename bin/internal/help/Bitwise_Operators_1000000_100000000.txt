{{QBDLDATE:07-10-2024}}
{{QBDLTIME:00:21:35}}
Bitwise operators are much like the regular mathematics operators (+, * etc.) but are defined in terms of the individual bits of their operands. The full list of bitwise operators, with a brief summary of its operation:
* '''NOT''': Invert all bits
* '''AND''': True if both inputs are true
* '''OR''': True if one or both inputs are true
* '''XOR''': True if exactly one input is true
* '''EQV''': True if both inputs are the same
* '''IMP''': True unless first input is true and second is false


{{PageSyntax}}
With the exception of NOT, all the bitwise operators take two operands:
: ''result'' = ''value1'' '''AND''' ''value2''
NOT goes before the value it operates on:
: ''result'' = '''NOT''' ''value1''
If ''value1'' or ''value2'' are non-integer numeric types, they are rounded to the nearest integer.


{{PageDescription}}
Bitwise operators work by comparing the corresponding bits in each of the input values to generate a single bit in the output value. The operators differ in how they do the comparison. The table below shows the output bit for each pair of input bits:
{{LogicalTruthPlugin}}
Again, note that the NOT operator only has one operand. It is shown in the same table for convenience.

If one input has more bits than the other (say, an INTEGER vs a LONG) the shorter will be considered to have 0's in the missing bit positions if it is positive, or 1's if it is negative. This scheme comes about because of the [[Wikipedia:Two's complement|Two's Complement]] system for representing negative numbers. As a general rule, there should not be any surprises.

=== Use as logical operators ===
QB64 does not have AND/OR/NOT operators dedicated to operating on the overall truth of values. A numeric value is defined to be ''false'' if it is equal to 0, and ''true'' for any other value, though -1 is the standard ''true'' value,  returned by the <, <= etc. operators. One can use the bitwise operators mostly like regular logical operators, but with caution. For instance, 3 is a true value, so as a logical operator NOT 3 would be 0 (false). Because it is in fact a bitwise operator, it evaluates to -4.


{{PageExamples}}
;Example 1:Use '''AND''' to mask certain bits in a value. In this example, the 1's in the mask (y&) specify which bits in (x&) we are interested in, forcing all others to 0.
{{CodeStart}}
x& = {{Cl|VAL}}({{Text|<nowiki>"&B101010"</nowiki>|#FFB100}}) {{Text|<nowiki>'Arbitrary collection of bits</nowiki>|#919191}}
y& = {{Cl|VAL}}({{Text|<nowiki>"&B001100"</nowiki>|#FFB100}}) {{Text|<nowiki>'A bit mask</nowiki>|#919191}}
{{Cl|PRINT}} {{Text|<nowiki>"Input 1: "</nowiki>|#FFB100}}; {{Text|BinStr$|#55FF55}}(x&, {{Text|6|#F580B1}}) {{Text|<nowiki>'6 indicates we want 6 bits of output</nowiki>|#919191}}
{{Cl|PRINT}} {{Text|<nowiki>"Input 2: "</nowiki>|#FFB100}}; {{Text|BinStr$|#55FF55}}(y&, {{Text|6|#F580B1}})
{{Cl|PRINT}} {{Text|<nowiki>"Output:  "</nowiki>|#FFB100}}; {{Text|BinStr$|#55FF55}}(x& {{Cl|AND}} y&, {{Text|6|#F580B1}})

{{Text|<nowiki>'Converts the number n& to a string of binary digits, digits& long (padding or truncating as necessary).</nowiki>|#919191}}
{{Cl|FUNCTION}} {{Text|BinStr$|#55FF55}} (n&, digits&)
    {{Cl|FOR}} i& = digits& - {{Text|1|#F580B1}} {{Cl|TO}} {{Text|0|#F580B1}} {{Cl|STEP}} {{Text|-1|#F580B1}}
        {{Cl|IF}} (n& {{Cl|AND (boolean)|AND}} {{Text|2|#F580B1}} ^ i&) {{Cl|THEN}} B$ = B$ + {{Text|<nowiki>"1"</nowiki>|#FFB100}} {{Cl|ELSE}} B$ = B$ + {{Text|<nowiki>"0"</nowiki>|#FFB100}}
    {{Cl|NEXT}}
    {{Text|BinStr$|#55FF55}} = B$
{{Cl|END FUNCTION}}
{{CodeEnd}}
{{OutputStart}}
Input 1: 101010
Input 2: 001100
Output:  001000
{{OutputEnd}}

;Example 2:Use '''OR''' to combine bit flags into a single value. The presence of a flag can then be tested by using the flag as a mask with '''AND'''.
{{CodeStart}}
{{Text|<nowiki>'The trick here is to give each flag a value corresponding to a different bit being 1</nowiki>|#919191}}
FLAG_A& = {{Cl|VAL}}({{Text|<nowiki>"&B0001"</nowiki>|#FFB100}})
FLAG_B& = {{Cl|VAL}}({{Text|<nowiki>"&B0010"</nowiki>|#FFB100}})
FLAG_C& = {{Cl|VAL}}({{Text|<nowiki>"&B0100"</nowiki>|#FFB100}})
FLAG_D& = {{Cl|VAL}}({{Text|<nowiki>"&B1000"</nowiki>|#FFB100}})

flags& = FLAG_A& {{Cl|OR}} FLAG_C& {{Text|<nowiki>'Set flags A, C</nowiki>|#919191}}

{{Text|<nowiki>'Use each flag as a bitmask to test for its presence:</nowiki>|#919191}}
{{Cl|IF}} flags& {{Cl|AND (boolean)|AND}} FLAG_A& {{Cl|THEN}} {{Cl|PRINT}} {{Text|<nowiki>"Flag A is set"</nowiki>|#FFB100}}
{{Cl|IF}} flags& {{Cl|AND (boolean)|AND}} FLAG_B& {{Cl|THEN}} {{Cl|PRINT}} {{Text|<nowiki>"Flag B is set"</nowiki>|#FFB100}}
{{Cl|IF}} flags& {{Cl|AND (boolean)|AND}} FLAG_C& {{Cl|THEN}} {{Cl|PRINT}} {{Text|<nowiki>"Flag C is set"</nowiki>|#FFB100}}
{{Cl|IF}} flags& {{Cl|AND (boolean)|AND}} FLAG_D& {{Cl|THEN}} {{Cl|PRINT}} {{Text|<nowiki>"Flag D is set"</nowiki>|#FFB100}}
{{CodeEnd}}
{{OutputStart}}
Flag A is set
Flag C is set
{{OutputEnd}}

;Example 3:Use '''XOR''' to toggle a bit flag (that is, change its state to the opposite of what it was). This example is the same as the '''OR''' example above, but with one extra line added. This time we enable flags A & C, then toggle flags A & B. This will disable flag A and enable B.
{{CodeStart}}
{{Text|<nowiki>'The trick here is to give each flag a value corresponding to a different bit being 1</nowiki>|#919191}}
FLAG_A& = {{Cl|VAL}}({{Text|<nowiki>"&B0001"</nowiki>|#FFB100}})
FLAG_B& = {{Cl|VAL}}({{Text|<nowiki>"&B0010"</nowiki>|#FFB100}})
FLAG_C& = {{Cl|VAL}}({{Text|<nowiki>"&B0100"</nowiki>|#FFB100}})
FLAG_D& = {{Cl|VAL}}({{Text|<nowiki>"&B1000"</nowiki>|#FFB100}})

flags& = FLAG_A& {{Cl|OR}} FLAG_C& {{Text|<nowiki>'Set flags A, C</nowiki>|#919191}}
flags& = flags& {{Cl|XOR}} FLAG_A& {{Cl|XOR}} FLAG_B& {{Text|<nowiki>'Toggle flags A, B</nowiki>|#919191}}

{{Text|<nowiki>'Use each flag as a bitmask to test for its presence:</nowiki>|#919191}}
{{Cl|IF}} flags& {{Cl|AND (boolean)|AND}} FLAG_A& {{Cl|THEN}} {{Cl|PRINT}} {{Text|<nowiki>"Flag A is set"</nowiki>|#FFB100}}
{{Cl|IF}} flags& {{Cl|AND (boolean)|AND}} FLAG_B& {{Cl|THEN}} {{Cl|PRINT}} {{Text|<nowiki>"Flag B is set"</nowiki>|#FFB100}}
{{Cl|IF}} flags& {{Cl|AND (boolean)|AND}} FLAG_C& {{Cl|THEN}} {{Cl|PRINT}} {{Text|<nowiki>"Flag C is set"</nowiki>|#FFB100}}
{{Cl|IF}} flags& {{Cl|AND (boolean)|AND}} FLAG_D& {{Cl|THEN}} {{Cl|PRINT}} {{Text|<nowiki>"Flag D is set"</nowiki>|#FFB100}}
{{CodeEnd}}
{{OutputStart}}
Flag B is set
Flag C is set
{{OutputEnd}}


{{PageNavigation}}
